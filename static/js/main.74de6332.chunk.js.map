{"version":3,"sources":["modules/github/index.ts","api/github.ts","lib/reducerUtils.ts","modules/github/reducer.ts","modules/github/thunks.ts","lib/createAsyncThunk.ts","lib/createAsyncSaga.ts","modules/github/sagas.ts","modules/github/actions.ts","components/GithubUsernameForm.tsx","components/GithubProfileInfo.tsx","containers/GithubProfileLoader.tsx","App.tsx","serviceWorker.ts","modules/index.ts","index.tsx"],"names":["getUserProfile","username","a","axios","get","response","data","asyncState","initial","initialData","loading","error","load","success","transformToArray","asyncActionCreator","request","failure","key","initialState","userProfile","github","createReducer","handleAction","getUserProfileAsync","state","action","map","getType","type","payload","promiseCreator","isPayloadAction","undefined","githubSaga","getUserProfileSaga","saga","call","result","put","takeEvery","GET_USER_PROFILE","createAsyncAction","GithubUsernameForm","onSubmitUsername","useState","input","setInput","className","onSubmit","e","preventDefault","onChange","target","value","placeholder","GithubProfileInfo","name","thumbnail","bio","blog","src","alt","href","GithubProfileLoader","useSelector","dispatch","useDispatch","style","textAlign","avatar_url","App","Boolean","window","location","hostname","match","rootSaga","rootReducer","combineReducers","all","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6IAAA,sQ,6GCEO,SAAeA,EAAtB,kC,2CAAO,WAA8BC,GAA9B,eAAAC,EAAA,qEACkBC,IAAMC,IAAN,uCACWH,IAF7B,cACCI,EADD,yBAIEA,EAASC,MAJX,0C,iqBCOA,IAAMC,EAAa,CACxBC,QAAS,SAAaC,GAAb,MAAoD,CAC3DC,SAAS,EACTJ,KAAMG,GAAe,KACrBE,MAAO,OAETC,KAAM,SAAaN,GAAb,MAA6C,CACjDI,SAAS,EACTJ,KAAMA,GAAQ,KACdK,MAAO,OAETE,QAAS,SAAaP,GAAb,MAA4C,CACnDI,SAAS,EACTJ,OACAK,MAAO,OAETA,MAAO,SAAOA,GAAP,MAAuC,CAC5CD,SAAS,EACTJ,KAAM,KACNK,MAAOA,KAKJ,SAASG,EAAmDC,GAEjE,MAAO,CAD+BA,EAA9BC,QAA8BD,EAArBF,QAAqBE,EAAZE,SC7B5B,IDkCEF,EACAG,ECnCIC,EAA4B,CAChCC,YAAab,EAAWC,WAGpBa,EAASC,wBAAyCH,GAAcI,aACpET,EAAiBU,MD6BjBT,EC5BmBS,ID6BnBN,EC7BwC,cD+BjC,SAACO,EAAUC,GAAuB,IAAD,EACFZ,EAAiBC,GAAoBY,IAAIC,WADvC,mBAC/BZ,EAD+B,KACtBH,EADsB,KACbI,EADa,KAEtC,OAAQS,EAAOG,MACb,KAAKb,EACH,OAAO,EAAP,GACKS,EADL,eAEGP,EAAMX,EAAWK,SAEtB,KAAKC,EACH,OAAO,EAAP,GACKY,EADL,eAEGP,EAAMX,EAAWM,QAAQa,EAAOI,WAErC,KAAKb,EACH,OAAO,EAAP,GACKQ,EADL,eAEGP,EAAMX,EAAWI,MAAMe,EAAOI,WAEnC,QACE,OAAOL,MC/CAJ,O,2ECVR,ICELN,EACAgB,EADAhB,EDFkDS,ICGlDO,EDHuE/B,K,0EEGzE,SAASgC,EAAmBN,GAC1B,YAA0BO,IAAnBP,EAAOI,Q,oCAIdf,EAKAgB,E,WCVeG,GAFXC,GDOJpB,ECPyCS,IDYzCO,ECZ8D/B,IDc9D,SAAO,SAAUoC,EAAKV,GAAf,mFAEYM,EAAoBN,GAFhC,gBAGC,OAHD,SAGOW,YAAKN,EAAgBL,EAAOI,SAHnC,0CAIC,OAJD,SAIOO,YAAKN,GAJZ,2BAKH,OAHMO,EAFH,eAKGC,YAAIxB,EAAmBF,QAAQyB,IALlC,gCAOH,OAPG,oCAOGC,YAAIxB,EAAmBE,QAAnB,OAPP,oCAAUmB,EAAV,kBCZF,SAAUF,IAAV,gEACL,OADK,SACCM,YAAUC,IAAkBN,GAD7B,wC,kICPP,4EAIaM,EAAmB,0BAInBjB,EAAsBkB,4BACjCD,EAJsC,kCACF,gCAEHC,I,0GCmBpBC,MApBf,YAA4E,IAA9CC,EAA6C,EAA7CA,iBAA6C,EAC/CC,mBAAS,IADsC,mBAClEC,EADkE,KAC3DC,EAD2D,KAYzE,OACE,0BAAMC,UAAU,qBAAqBC,SAVtB,SAACC,GAChBA,EAAEC,iBACFP,EAAiBE,KASf,2BAAOM,SANM,SAACF,GAChBH,EAASG,EAAEG,OAAOC,QAKWA,MAAOR,EAAOS,YAAY,oEACrD,4BAAQ1B,KAAK,UAAb,kB,MCCS2B,MAbf,YAAoF,IAAvDC,EAAsD,EAAtDA,KAAMC,EAAgD,EAAhDA,UAAWC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,KACjD,OACE,yBAAKZ,UAAU,qBACb,yBAAKA,UAAU,gBACb,yBAAKa,IAAKH,EAAWI,IAAI,mBACzB,yBAAKd,UAAU,QAAQS,IAEzB,2BAAIE,GACJ,6BAAe,KAATC,GAAe,uBAAGG,KAAMH,GAAT,yB,QCOZI,MAlBf,WAAgC,IAAD,EACIC,YAAY,SAACxC,GAAD,OAAsBA,EAAMJ,OAAOD,cAAxEd,EADqB,EACrBA,KAAMI,EADe,EACfA,QAASC,EADM,EACNA,MACjBuD,EAAWC,cAMjB,OACE,oCACE,kBAAC,EAAD,CAAoBvB,iBANC,SAAC3C,GACxBiE,EAAS1C,sBAAoBR,QAAQf,OAMlCS,GAAW,uBAAG0D,MAAO,CAAEC,UAAW,WAAvB,wBACX1D,GAAS,uBAAGyD,MAAO,CAAEC,UAAW,WAAvB,8BACT/D,GAAQ,kBAAC,EAAD,CAAmBqD,IAAKrD,EAAKqD,IAAKC,KAAMtD,EAAKsD,KAAMH,KAAMnD,EAAKmD,KAAMC,UAAWpD,EAAKgE,eCbpFC,EAJO,WACpB,OAAO,kBAAC,EAAD,OCQWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sDCJWC,GAJFC,EAJKC,YAAgB,CAClC1D,mBAOK,SAAUwD,IAAV,gEACL,OADK,SACCG,YAAI,CAAC9C,yBADN,sCCHP,IAAM+C,EAAiBC,cAEjBC,EAAQC,YAAYN,EAAaO,YAAgBJ,IAEvDA,EAAeK,IAAIT,GAEnBU,IAASC,OACP,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,OAEFM,SAASC,eAAe,SFoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.74de6332.chunk.js","sourcesContent":["export { default } from './reducer';\r\nexport * from './actions';\r\nexport * from './types';\r\nexport * from './thunks';\r\nexport * from './sagas';","import axios from 'axios';\r\n\r\nexport async function getUserProfile(username: string) {\r\n  const response = await axios.get<GithubProfile>(\r\n    `https://api.github.com/users/${username}`\r\n  );\r\n  return response.data; \r\n}\r\n\r\nexport interface GithubProfile {\r\n  login: string;\r\n  id: number;\r\n  node_id: string;\r\n  avatar_url: string;\r\n  gravatar_id: string;\r\n  url: string;\r\n  html_url: string;\r\n  followers_url: string;\r\n  following_url: string;\r\n  gists_url: string;\r\n  starred_url: string;\r\n  subscriptions_url: string;\r\n  organizations_url: string;\r\n  repos_url: string;\r\n  events_url: string;\r\n  received_events_url: string;\r\n  type: string;\r\n  site_admin: boolean;\r\n  name: string;\r\n  company: string;\r\n  blog: string;\r\n  location: null;\r\n  email: null;\r\n  hireable: null;\r\n  bio: string;\r\n  public_repos: number;\r\n  public_gists: number;\r\n  followers: number;\r\n  following: number;\r\n  created_at: Date;\r\n  updated_at: Date;\r\n}","import { AnyAction } from 'redux';\r\nimport { getType, AsyncActionCreatorBuilder } from 'typesafe-actions';\r\n\r\nexport type AsyncState<T, E = any> = {\r\n  data: T | null;\r\n  loading: boolean;\r\n  error: E | null;\r\n};\r\n\r\nexport const asyncState = {\r\n  initial: <T, E = any>(initialData?: T): AsyncState<T, E> => ({\r\n    loading: false,\r\n    data: initialData || null,\r\n    error: null\r\n  }),\r\n  load: <T, E = any>(data?: T): AsyncState<T, E> => ({\r\n    loading: true,\r\n    data: data || null,\r\n    error: null\r\n  }),\r\n  success: <T, E = any>(data: T): AsyncState<T, E> => ({\r\n    loading: false,\r\n    data,\r\n    error: null\r\n  }),\r\n  error: <T, E>(error: E): AsyncState<T, E> => ({\r\n    loading: false,\r\n    data: null,\r\n    error: error\r\n  })\r\n};\r\n\r\ntype AnyAsyncActionCreator = AsyncActionCreatorBuilder<any, any, any>;\r\nexport function transformToArray<AC extends AnyAsyncActionCreator>(asyncActionCreator: AC) {\r\n  const { request, success, failure } = asyncActionCreator;\r\n  return [request, success, failure];\r\n}\r\n\r\nexport function createAsyncReducer<S, AC extends AnyAsyncActionCreator, K extends keyof S>(\r\n  asyncActionCreator: AC,\r\n  key: K\r\n) {\r\n  return (state: S, action: AnyAction) => {\r\n    const [request, success, failure] = transformToArray(asyncActionCreator).map(getType);\r\n    switch (action.type) {\r\n      case request:\r\n        return {\r\n          ...state,\r\n          [key]: asyncState.load()\r\n        };\r\n      case success:\r\n        return {\r\n          ...state,\r\n          [key]: asyncState.success(action.payload)\r\n        };\r\n      case failure:\r\n        return {\r\n          ...state,\r\n          [key]: asyncState.error(action.payload)\r\n        };\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n}","import { createReducer } from 'typesafe-actions';\r\nimport { GithubState, GithubAction } from './types';\r\nimport { getUserProfileAsync } from './actions';\r\nimport { asyncState, createAsyncReducer, transformToArray } from '../../lib/reducerUtils';\r\n\r\nconst initialState: GithubState = {\r\n  userProfile: asyncState.initial()\r\n};\r\n\r\nconst github = createReducer<GithubState, GithubAction>(initialState).handleAction(\r\n  transformToArray(getUserProfileAsync),\r\n  createAsyncReducer(getUserProfileAsync, 'userProfile')\r\n);\r\n\r\nexport default github;","import { getUserProfile } from '../../api/github';\r\nimport { getUserProfileAsync } from './actions';\r\nimport createAsyncThunk from '../../lib/createAsyncThunk';\r\n\r\nexport const getUserProfileThunk = createAsyncThunk(getUserProfileAsync, getUserProfile);","import { Dispatch } from 'redux';\r\nimport { AsyncActionCreatorBuilder } from 'typesafe-actions';\r\n\r\ntype AnyAsyncActionCreator = AsyncActionCreatorBuilder<any, any, any>;\r\n\r\nexport default function createAsyncThunk<A extends AnyAsyncActionCreator, F extends (...params: any[]) => Promise<any>>(\r\n  asyncActionCreator: A,\r\n  promiseCreator: F\r\n) {\r\n  type Params = Parameters<F>;\r\n  return function thunk(...params: Params) {\r\n    return async (dispatch: Dispatch) => {\r\n      const { request, success, failure } = asyncActionCreator;\r\n      dispatch(request(undefined));\r\n      try {\r\n        const result = await promiseCreator(...params);\r\n        dispatch(success(result));\r\n      } catch (e) {\r\n        dispatch(failure(e));\r\n      }\r\n    };\r\n  };\r\n}","import { call, put } from \"redux-saga/effects\";\r\nimport { AsyncActionCreatorBuilder, PayloadAction } from \"typesafe-actions\";\r\n\r\ntype PromiseCreatorFunction<P, T> =\r\n  | ((payload: P) => Promise<T>)\r\n  | (() => Promise<T>);\r\n\r\nfunction isPayloadAction<P>(action: any): action is PayloadAction<string, P> {\r\n  return action.payload !== undefined;\r\n}\r\n\r\nexport default function createAsyncSaga<T1, P1, T2, P2, T3, P3>(\r\n  asyncActionCreator: AsyncActionCreatorBuilder<\r\n    [T1, [P1, undefined]],\r\n    [T2, [P2, undefined]],\r\n    [T3, [P3, undefined]]\r\n  >,\r\n  promiseCreator: PromiseCreatorFunction<P1, P2>\r\n) {\r\n  return function* saga(action: ReturnType<typeof asyncActionCreator.request>) {\r\n    try {\r\n      const result = isPayloadAction<P1>(action)\r\n        ? yield call(promiseCreator, action.payload)\r\n        : yield call(promiseCreator);\r\n      yield put(asyncActionCreator.success(result));\r\n    } catch (e) {\r\n      yield put(asyncActionCreator.failure(e));\r\n    }\r\n  };\r\n}","import { getUserProfileAsync, GET_USER_PROFILE } from './actions';\r\nimport { getUserProfile } from '../../api/github';\r\nimport { takeEvery } from 'redux-saga/effects';\r\nimport createAsyncSaga from '../../lib/createAsyncSaga';\r\n\r\nconst getUserProfileSaga = createAsyncSaga(getUserProfileAsync, getUserProfile);\r\n\r\nexport function* githubSaga() {\r\n  yield takeEvery(GET_USER_PROFILE, getUserProfileSaga);\r\n}","import { createAsyncAction } from 'typesafe-actions';\r\nimport { GithubProfile } from '../../api/github';\r\nimport { AxiosError } from 'axios';\r\n\r\nexport const GET_USER_PROFILE = 'github/GET_USER_PROFILE';\r\nexport const GET_USER_PROFILE_SUCCESS = 'github/GET_USER_PROFILE_SUCCESS';\r\nexport const GET_USER_PROFILE_ERROR = 'github/GET_USER_PROFILE_ERROR';\r\n\r\nexport const getUserProfileAsync = createAsyncAction(\r\n  GET_USER_PROFILE,\r\n  GET_USER_PROFILE_SUCCESS,\r\n  GET_USER_PROFILE_ERROR\r\n)<string, GithubProfile, AxiosError>();","import React, { FormEvent, useState, ChangeEvent } from 'react';\r\nimport './GithubUsernameForm.css';\r\n\r\ntype GithubUsernameFormProps = {\r\n  onSubmitUsername: (username: string) => void;\r\n};\r\n\r\nfunction GithubUsernameForm({ onSubmitUsername }: GithubUsernameFormProps) {\r\n  const [input, setInput] = useState('');\r\n\r\n  const onSubmit = (e: FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    onSubmitUsername(input);\r\n  };\r\n\r\n  const onChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setInput(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <form className=\"GithubUsernameForm\" onSubmit={onSubmit}>\r\n      <input onChange={onChange} value={input} placeholder=\"Github 계정명을 입력하세요.\" />\r\n      <button type=\"submit\">조회</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default GithubUsernameForm;","import React from 'react';\r\nimport './GithubProfileInfo.css';\r\n\r\ntype GithubProfileInfoProps = {\r\n  name: string;\r\n  thumbnail: string;\r\n  bio: string;\r\n  blog: string;\r\n};\r\n\r\nfunction GithubProfileInfo({ name, thumbnail, bio, blog }: GithubProfileInfoProps) {\r\n  return (\r\n    <div className=\"GithubProfileInfo\">\r\n      <div className=\"profile-head\">\r\n        <img src={thumbnail} alt=\"user thumbnail\" />\r\n        <div className=\"name\">{name}</div>\r\n      </div>\r\n      <p>{bio}</p>\r\n      <div>{blog !== '' && <a href={blog}>블로그</a>}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GithubProfileInfo;","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RootState } from '../modules';\r\nimport GithubUsernameForm from '../components/GithubUsernameForm';\r\nimport GithubProfileInfo from '../components/GithubProfileInfo';\r\nimport { getUserProfileAsync } from '../modules/github';\r\n\r\nfunction GithubProfileLoader() {\r\n  const { data, loading, error } = useSelector((state: RootState) => state.github.userProfile);\r\n  const dispatch = useDispatch();\r\n\r\n  const onSubmitUsername = (username: string) => {\r\n    dispatch(getUserProfileAsync.request(username));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <GithubUsernameForm onSubmitUsername={onSubmitUsername} />\r\n      {loading && <p style={{ textAlign: 'center' }}>로딩중..</p>}\r\n      {error && <p style={{ textAlign: 'center' }}>에러 발생!</p>}\r\n      {data && <GithubProfileInfo bio={data.bio} blog={data.blog} name={data.name} thumbnail={data.avatar_url} />}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default GithubProfileLoader;","import React from 'react';\nimport GithubProfileLoader from './containers/GithubProfileLoader';\n\nconst App: React.FC = () => {\n  return <GithubProfileLoader />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\nimport github from './github';\nimport { githubSaga } from './github';\nimport { all } from 'redux-saga/effects';\n\n\nconst rootReducer = combineReducers({\n  github\n});\n\nexport default rootReducer;\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport function* rootSaga() {\n  yield all([githubSaga()]);\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer, { rootSaga } from './modules';\n\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(rootReducer, applyMiddleware(sagaMiddleware));\n\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}